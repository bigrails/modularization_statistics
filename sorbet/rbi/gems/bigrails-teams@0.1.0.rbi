# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bigrails-teams` gem.
# Please instead update this file by running `bin/tapioca gem bigrails-teams`.

module Teams
  class << self
    sig { returns(T::Array[::Teams::Team]) }
    def all; end

    sig { void }
    def bust_caches!; end

    sig { params(name: ::String).returns(T.nilable(::Teams::Team)) }
    def find(name); end

    sig { params(dir: ::String).returns(T::Array[::Teams::Team]) }
    def for_directory(dir); end

    sig { params(string: ::String).returns(::String) }
    def tag_value_for(string); end

    sig { params(teams: T::Array[::Teams::Team]).returns(T::Array[::String]) }
    def validation_errors(teams); end
  end
end

class Teams::IncorrectPublicApiUsageError < ::StandardError; end

class Teams::Plugin
  abstract!

  sig { params(team: ::Teams::Team).void }
  def initialize(team); end

  class << self
    sig { returns(T::Array[T.class_of(Teams::Plugin)]) }
    def all_plugins; end

    sig { params(team: ::Teams::Team).returns(T.attached_class) }
    def for(team); end

    sig { params(base: T.untyped).void }
    def inherited(base); end

    sig { params(team: ::Teams::Team, key: ::String).returns(::String) }
    def missing_key_error_message(team, key); end

    sig { params(teams: T::Array[::Teams::Team]).returns(T::Array[::String]) }
    def validation_errors(teams); end

    private

    sig { params(team: ::Teams::Team).returns(T.attached_class) }
    def register_team(team); end

    sig { returns(T::Hash[T.nilable(::String), T::Hash[::Class, ::Teams::Plugin]]) }
    def registry; end
  end
end

module Teams::Plugins; end

class Teams::Plugins::Identity < ::Teams::Plugin
  sig { returns(::Teams::Plugins::Identity::IdentityStruct) }
  def identity; end

  class << self
    sig { override.params(teams: T::Array[::Teams::Team]).returns(T::Array[::String]) }
    def validation_errors(teams); end
  end
end

class Teams::Plugins::Identity::IdentityStruct < ::Struct
  def name; end
  def name=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Teams::Team
  sig { params(config_yml: T.nilable(::String), raw_hash: T::Hash[T.untyped, T.untyped]).void }
  def initialize(config_yml:, raw_hash:); end

  sig { params(other: ::Object).returns(T::Boolean) }
  def ==(other); end

  sig { returns(T.nilable(::String)) }
  def config_yml; end

  def eql?(*args, &blk); end

  sig { returns(::Integer) }
  def hash; end

  sig { returns(::String) }
  def name; end

  sig { returns(T::Hash[T.untyped, T.untyped]) }
  def raw_hash; end

  sig { returns(::String) }
  def to_tag; end

  class << self
    sig { params(raw_hash: T::Hash[T.untyped, T.untyped]).returns(::Teams::Team) }
    def from_hash(raw_hash); end

    sig { params(config_yml: ::String).returns(::Teams::Team) }
    def from_yml(config_yml); end
  end
end

Teams::UNKNOWN_TEAM_STRING = T.let(T.unsafe(nil), String)
